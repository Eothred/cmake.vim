{"name":"CMake Support for Vim","tagline":"Incorporates the functionality of CMake into Vim. Because it's AWESOME.","body":"# CMake Project Support in Vim\r\n[CMake](http://www.cmake.org) is the ONLY way you should be building your C or \r\nC++ projects. [Vim](http://www.vim.org) is the ultimate text editor. Together, \r\nalong with the power of gray skull, CMake support in Vim is born.\r\n\r\n[`cmake.vim`](https://github.com/jalcine/cmake.vim/tree/v0.1.3) `v0.1.3` is a Vim \r\nplugin that allows you to build your projects that are based on the CMake \r\nmeta-build system.\r\n\r\n## Requirements\r\n> **NOTE**: This plugin has ONLY been tested on a bleeding edge version of Vim \r\n> 7.3 with `--features=huge`. Please report any problems you encounter with \r\n> version information and compilation options included.\r\n\r\nAt the time of writing, `cmake.vim` supports Vim 7.3+ and CMake 2.8+. Have fun!\r\n\r\n## Installing\r\nI recommending using [Vundle](http://github.com/gmarik/vundle) to install \r\nplugins. The line necessary to add this plugin is as follows:\r\n\r\n```viml\r\nBundle 'jalcine/cmake.vim`\r\n```\r\n\r\n## Commands\r\nSome of the more commonly used commands in the plugin include:\r\n\r\n  + `:CMakeBuild` - invokes `make` from the path prescribed by CMake.\r\n  + `:CMakeInstall` - invokes `make install` from the path prescribed by CMake.\r\n  + `:CMakeTest` - invokes `make test` from the path prescribed by CMake.\r\n  + `:CMakeCreateBuild` - handles the work of creating the initial CMake build \r\n    directory.\r\n\r\n## Options\r\nIn order for CMake to operate, it **has** to know where the build directory is \r\nlocated. This is done automatically by the plugin but it does need help in the \r\nevent that you happen to build your CMake project in a sub-directory. This \r\noption and more are listed below.\r\n\r\n  + `g:cmake_cxx_compiler`: Defines the default C++ compiler to build your \r\n    project with. (default: `clang++`)\r\n  + `g:cmake_c_compiler`: Defines the default C compiler to build your project \r\n    with (default: `clang`)\r\n  + `g:cmake_build_dirs`: Defines the names of directories at which \r\n    a directory would be searched for `CMakeCache.txt`. (default: [ 'build' ])\r\n  + `g:cmake_build_type`: Defines the build configuration type of the project. \r\n    (default ['Debug'])\r\n  + `g:cmake_install_prefix`: Defines the installation prefix to be used by \r\n    CMake. (default: $HOME/.local)\r\n  + `g:cmake_build_shared_libs`: Defines the flag 'BUILD_SHARED_LIBS` in \r\n    CMake. (default: true)\r\n\r\n**NOTE**: These variables are defined by `cmake.vim` if the variable itself \r\nisn't found *before* it's loaded.\r\n\r\n## License\r\nThis code is released and available under the MIT license. Multiply and be \r\nfruitful.\r\n\r\n## Author\r\nI'm [Jacky Alcine](https://twitter.com/jackyalcine) and I like code. A lot. \r\nI also chat a lot like a firehose so follow with caution!\r\n","google":"UA-21819111-3","note":"Don't delete this file! It's used internally to help with page regeneration."}